'use client';

import { Match, Player } from '@/app/page';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Copy, Share2, MessageCircle, BarChart3 } from 'lucide-react';
import { useState, useMemo } from 'react';

interface MatchResultsProps {
  matches: Match[];
}

export function MatchResults({ matches }: MatchResultsProps) {
  const [copied, setCopied] = useState(false);

  // Calculate play count summary
  const playCountSummary = useMemo(() => {
    const countMap = new Map<string, { player: Player; count: number }>();

    matches.forEach(match => {
      match.playersPlaying.forEach(player => {
        const existing = countMap.get(player.id);
        // If player is double sider, count as 2, otherwise 1
        const increment = match.doubleSider?.id === player.id ? 2 : 1;
        
        if (existing) {
          existing.count += increment;
        } else {
          countMap.set(player.id, { player, count: increment });
        }
      });
    });

    return Array.from(countMap.values()).sort((a, b) => b.count - a.count);
  }, [matches]);

  // Calculate team skill totals
  const getTeamSkillTotal = (team: Player[] | undefined, doubleSider?: Player) => {
    if (!team) return 0;
    const regularPlayers = team.filter(p => p.id !== doubleSider?.id);
    const regularSkill = regularPlayers.reduce((sum, p) => sum + p.skillLevel, 0);
    const doubleSiderSkill = doubleSider ? doubleSider.skillLevel : 0;
    return regularSkill + doubleSiderSkill;
  };

  const formatMatchesForSharing = (): string => {
    let text = '🏆 *MATCH SCHEDULE* 🏆\n';
    text += '═══════════════════════\n\n';

    matches.forEach((match, index) => {
      text += `*MATCH ${index + 1}*\n`;
      text += '─────────────────────\n';
      
      if (match.mode === 'Teams') {
        const teamAPlayers = match.teamA?.filter(p => p.id !== match.doubleSider?.id) || [];
        const teamBPlayers = match.teamB?.filter(p => p.id !== match.doubleSider?.id) || [];

        text += `*Team A*\n`;
        text += teamAPlayers.map(p => `  • ${p.name}`).join('\n') + '\n';
        
        if (match.doubleSider) {
          text += `\n*Double Sider* 🌟\n`;
          text += `  • ${match.doubleSider.name}\n`;
        }
        
        text += `\n*Team B*\n`;
        text += teamBPlayers.map(p => `  • ${p.name}`).join('\n') + '\n';
        
        text += `\n🎯 *Toss Winner:* Team ${match.tossWinner}\n`;
      } else {
        const sequence = match.playerSequence?.map((p, i) => `${i + 1}. ${p.name}`).join(' → ') || '';
        text += `Player Order: ${sequence}\n`;
      }
      
      text += '\n';
    });

    text += '═══════════════════════\n';
    text += '_Generated by FairMatch Generator_';
    
    return text;
  };

  const formatMatchesTextPlain = (): string => {
    return matches.map((match, index) => {
      let text = `Match ${index + 1}: `;
      
      if (match.mode === 'Teams') {
        const teamANames = match.teamA?.map(p => p.name).join(', ') || '';
        const teamBNames = match.teamB?.map(p => p.name).join(', ') || '';
        text += `Team A (${teamANames}) vs Team B (${teamBNames})`;
        if (match.doubleSider) {
          text += `. Double Sider: ${match.doubleSider.name}`;
        }
        text += `. Toss Winner: Team ${match.tossWinner}`;
      } else {
        const sequence = match.playerSequence?.map((p, i) => `${i + 1}. ${p.name}`).join(', ') || '';
        text += `Player Sequence: ${sequence}`;
      }
      
      if (match.playersOut.length > 0) {
        text += `. Sitting Out: ${match.playersOut.map(p => p.name).join(', ')}`;
      }
      
      return text;
    }).join('\n\n');
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(formatMatchesForSharing());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  const shareViaWhatsApp = () => {
    const text = encodeURIComponent(formatMatchesForSharing());
    window.open(`https://web.whatsapp.com/send?text=${text}`, '_blank');
  };

  const handleShare = async () => {
    const text = formatMatchesForSharing();
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'FairMatch Generator Results',
          text: text
        });
      } catch (error) {
        if (error instanceof Error && error.name !== 'AbortError') {
          copyToClipboard();
        }
      }
    } else {
      copyToClipboard();
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-semibold text-gray-800">
            Generated Matches ({matches.length})
          </h2>
          
          <div className="flex gap-2 flex-wrap">
            <Button 
              onClick={copyToClipboard}
              variant="outline" 
              size="sm"
              className="text-gray-600 hover:text-gray-800"
            >
              <Copy className="h-4 w-4 mr-1" />
              {copied ? 'Copied!' : 'Copy'}
            </Button>
            
            <Button 
              onClick={shareViaWhatsApp}
              variant="outline" 
              size="sm"
              className="text-green-600 hover:text-green-700 border-green-200"
            >
              <MessageCircle className="h-4 w-4 mr-1" />
              WhatsApp
            </Button>
            
            <Button 
              onClick={handleShare}
              variant="outline" 
              size="sm"
              className="text-blue-600 hover:text-blue-700 border-blue-200"
            >
              <Share2 className="h-4 w-4 mr-1" />
              Share
            </Button>
          </div>
        </div>

        <div className="grid gap-4">
          {matches.map((match, index) => {
            const teamASkill = getTeamSkillTotal(match.teamA, match.doubleSider);
            const teamBSkill = getTeamSkillTotal(match.teamB, match.doubleSider);
            const skillDiff = Math.abs(teamASkill - teamBSkill);

            return (
              <Card key={index} className="border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <CardTitle className="text-lg font-medium text-gray-800 flex items-center gap-2">
                    Match {index + 1}
                    <Badge variant="outline" className="ml-auto">
                      {match.mode}
                    </Badge>
                  </CardTitle>
                </CardHeader>
                
                <CardContent className="space-y-4">
                  {/* Teams/Players */}
                  <div className="space-y-3">
                    {match.mode === 'Teams' ? (
                      <div className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="bg-blue-50 rounded-lg p-3 border border-blue-200">
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-medium text-blue-800">Team A</h4>
                              <Badge variant="secondary" className="bg-blue-200 text-blue-900 text-xs">
                                Skill: {teamASkill}
                              </Badge>
                            </div>
                            <div className="flex flex-wrap gap-1">
                              {match.teamA?.filter(p => p.id !== match.doubleSider?.id).map((player) => (
                                <Badge key={player.id} variant="secondary" className="bg-blue-100 text-blue-800">
                                  {player.name} ({player.skillLevel})
                                </Badge>
                              ))}
                            </div>
                          </div>
                          
                          <div className="bg-red-50 rounded-lg p-3 border border-red-200">
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-medium text-red-800">Team B</h4>
                              <Badge variant="secondary" className="bg-red-200 text-red-900 text-xs">
                                Skill: {teamBSkill}
                              </Badge>
                            </div>
                            <div className="flex flex-wrap gap-1">
                              {match.teamB?.filter(p => p.id !== match.doubleSider?.id).map((player) => (
                                <Badge key={player.id} variant="secondary" className="bg-red-100 text-red-800">
                                  {player.name} ({player.skillLevel})
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </div>

                        {/* Skill Balance Indicator */}
                        <div className="flex items-center justify-center gap-2">
                          <Badge 
                            variant="outline" 
                            className={`${
                              skillDiff <= 1 ? 'bg-green-50 border-green-200 text-green-800' :
                              skillDiff <= 3 ? 'bg-yellow-50 border-yellow-200 text-yellow-800' :
                              'bg-orange-50 border-orange-200 text-orange-800'
                            }`}
                          >
                            Balance: {skillDiff <= 1 ? '⚖️ Excellent' : skillDiff <= 3 ? '✓ Good' : '~ Fair'} (Diff: {skillDiff})
                          </Badge>
                        </div>
                        
                        {/* Double Sider Display */}
                        {match.doubleSider && (
                          <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg p-3 border border-yellow-200">
                            <h4 className="font-medium text-yellow-800 mb-2 text-center">Double Sider (Plays for Both Teams)</h4>
                            <div className="flex justify-center">
                              <Badge variant="secondary" className="bg-gradient-to-r from-yellow-200 to-orange-200 text-yellow-800">
                                {match.doubleSider.name} ({match.doubleSider.skillLevel})
                              </Badge>
                            </div>
                          </div>
                        )}
                      </div>
                    ) : (
                      <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 border border-blue-200">
                        <h4 className="font-medium text-gray-800 mb-3 text-center">Player Sequence</h4>
                        <div className="flex flex-wrap justify-center gap-2">
                          {match.playerSequence?.map((player, index) => (
                            <div key={player.id} className="flex items-center gap-1">
                              <Badge className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-3 py-1">
                                {index + 1}. {player.name}
                              </Badge>
                              {index < (match.playerSequence?.length || 0) - 1 && (
                                <span className="text-gray-400">→</span>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Toss Winner (Teams only) */}
                  {match.mode === 'Teams' && (
                    <div className="flex items-center justify-center">
                      <Badge variant="outline" className="bg-green-50 border-green-200 text-green-800">
                        🎯 Toss Winner: Team {match.tossWinner}
                      </Badge>
                    </div>
                  )}

                  {/* Sitting Out */}
                  {match.playersOut.length > 0 && (
                    <div className="bg-gray-50 rounded-lg p-3 border border-gray-200">
                      <h4 className="font-medium text-gray-700 mb-2">Sitting Out</h4>
                      <div className="flex flex-wrap gap-1">
                        {match.playersOut.map((player) => (
                          <Badge key={player.id} variant="secondary" className="bg-gray-200 text-gray-700">
                            {player.name}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            );
          })}
        </div>
      </div>

      {/* Fairness Summary */}
      <Card className="bg-gradient-to-br from-purple-50 to-blue-50 border-purple-200 shadow-lg">
        <CardHeader>
          <CardTitle className="text-xl font-semibold text-gray-800 flex items-center gap-2">
            <BarChart3 className="h-5 w-5 text-purple-600" />
            Fairness Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
              {playCountSummary.map(({ player, count }) => (
                <div 
                  key={player.id}
                  className="bg-white rounded-lg p-3 border border-purple-200 shadow-sm hover:shadow-md transition-shadow"
                >
                  <div className="flex items-center justify-between">
                    <span className="font-medium text-gray-800">{player.name}</span>
                    <Badge 
                      variant="secondary" 
                      className={`${
                        count >= Math.max(...playCountSummary.map(p => p.count)) 
                          ? 'bg-green-100 text-green-800' 
                          : count <= Math.min(...playCountSummary.map(p => p.count))
                          ? 'bg-orange-100 text-orange-800'
                          : 'bg-blue-100 text-blue-800'
                      }`}
                    >
                      {count} {count === 1 ? 'match' : 'matches'}
                    </Badge>
                  </div>
                  <div className="mt-2 text-xs text-gray-600">
                    Skill Level: {player.skillLevel}
                  </div>
                </div>
              ))}
            </div>

            {/* Statistics */}
            <div className="bg-white rounded-lg p-4 border border-purple-200">
              <h4 className="font-medium text-gray-800 mb-3">Distribution Statistics</h4>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-600">
                    {Math.max(...playCountSummary.map(p => p.count))}
                  </div>
                  <div className="text-gray-600">Most Matches</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-600">
                    {Math.min(...playCountSummary.map(p => p.count))}
                  </div>
                  <div className="text-gray-600">Least Matches</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {(playCountSummary.reduce((sum, p) => sum + p.count, 0) / playCountSummary.length).toFixed(1)}
                  </div>
                  <div className="text-gray-600">Average</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">
                    {Math.max(...playCountSummary.map(p => p.count)) - Math.min(...playCountSummary.map(p => p.count))}
                  </div>
                  <div className="text-gray-600">Difference</div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}